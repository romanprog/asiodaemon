#ifndef DNSBUFFER_HPP
#define DNSBUFFER_HPP

#include "Abstract/ParsingBuffAbstract.hpp"

#include <string>
#include <vector>

struct DnsQHeader
{
    /*
     * Identifier: A 16-bit identification field generated by the device that creates the
     * DNS query. It is copied by the server into the response, so it can be used by that
     * device to match that query to the corresponding reply received from a DNS server.
     * This is used in a manner similar to how the Identifier field is used in many of the
     * ICMP message types.
     */
    char ident[2] {0, 0};
    /*
     * Message flags.
     * Bits:
     * 0 - Query/Response. Differentiates between queries and responses.
     * 1-4 - Operation code. Standart query - 0.
     * 5 - AA Authoritative Answer Flag: This bit is set to 1 in a response to indicate that
     * the server that created the response is authoritative for the zone in which the domain
     * name specified in the Question section is located. If it is 0, the response is non-authoritative.
     * 6 - Truncated. When set to 1, indicates that the message was truncated due to its length being
     * longer than the maximum permitted for the type of transport mechanism used (512 bytes in UDP).
     * Need use TCP connection.
     * 7 - Recursion Desired: When set in a query, requests that the server receiving the query attempt
     * to answer the query recursively, if the server supports recursive resolution. The value of this
     * bit is not changed in the response.
     * 8 - Recursion Available: Set to 1 or cleared to 0 in a response to indicate whether the server
     * creating the response supports recursive queries. This can then be noted by the device that
     * sent the query for future use.
     * 9-11 - Reserved. Set to zero.
     * 12-16 - Error code. 0 - no error. > 0 - error.
     */
    char flags[2] {1,0};
    /*
     * QDcount
     * Question Count:
     * Specifies the number of questions in the Question section of the message.
     */
    char QDcount[2] {0, 1};
    /*
     * ANcount
     * Answer Record Count:
     * Specifies the number of resource records in the Answer section of the message.
     */
    char ANcount[2] {0, 0};
    /*
     * NScount
     * Authority Record Count:
     * Specifies the number of resource records in the Authority section of the message.
     */
    char NScount[2] {0, 0};
    /*
     * ARcount
     * Additional Record Count:
     * Specifies the number of resource records in the Additional section of the message.
     */
    char ARcount[2] {0, 0};
};

struct DnsQSufix
{
    // Query type: see DnsQType.
    char QType[2] {0, 15};
    // Query class. 1 by default.
    char QClass[2] {0, 1};
};


enum class DnsQType
{
    A = 1,
    PTR = 12,
    MX = 15
};



class DnsBuffer : public BuffAbstract
{
public:
    DnsBuffer();
    void set_domain(const std::string & dname);

private:

    DnsQHeader d_header;
    DnsQSufix d_sufix;

    // Domain name in DNS query format.
    std::string DnsDname;


    virtual size_t calculate_mem() override;
    virtual void when_new_data_acc(size_t bytes_readed) override;
    virtual void when_reseted() override;

};


#endif // DNSBUFFER_HPP
